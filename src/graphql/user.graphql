#注册
mutation signUpMutation($account: String!, $password: String!) {
	signUp(account: $account, password: $password) {
		id
		account
		name
		real_name
		gender
		avatar
		gold
		exp
		next_level_exp
		pay_account
		status
		token
		pay_info_change_count
	}
}

#登录
mutation signInMutation($account: String!, $password: String!) {
	signIn(account: $account, password: $password) {
		id
		account
		name
		real_name
		gender
		avatar
		gold
		exp
		next_level_exp
		pay_account
		status
		token
		pay_info_change_count
	}
}

#找回密码  （邮箱查找）
mutation ForgetPasswordMutation($account: String!) {
	forgetPassword(account: $account)
}

#重置密码
mutation ResetPasswordMutation($account: String!, $password: String!, $code: String!) {
	resetPassword(account: $account, password: $password, code: $code) {
		id
		account
	}
}

#修改密码

mutation UpdateUserPasswordMutation($old_password: String!, $new_password: String!) {
	updateUserPassword(old_password: $old_password, new_password: $new_password) {
		id
		account
		name
		real_name
		gender
		avatar
		gold
		ticket
		level {
			id
			name
			ticket_max
			level
		}
		pay_account
		exp
		next_level_exp
		token
	}
}

#用户个人资料
query UserQuery($id: Int!) {
	user(id: $id) {
		id
		name
		real_name
		gold
		ticket
		avatar
		exp
		next_level_exp
		transaction_sum_amount
		pay_account
		pay_info_change_count
		available_withdraw_count
		follow_users_count
		followers_count
		level {
			id
			name
			ticket_max
			level
			exp
		}
		wallet {
			id
			available_balance
			balance
		}
	}
}

#其他用户资料
query UserInfoQuery($id: Int!, $limit: Int, $offset: Int) {
	user(id: $id) {
		id
		name
		avatar
		gender
		follow_users_count
		followers_count
		followed_user_status
		level {
			id
			level
		}
		questions(limit: $limit, offset: $offset) {
			id
			description
			image {
				id
				path
				width
				height
			}
			video {
				height
				width
				path
				rotate
				duration
			}
			selections
			category {
				id
				name
			}
			count
		}
	}
}

#用户提现信息
query UserWithdrawQuery($id: Int!) {
	user(id: $id) {
		id
		gold
		transaction_sum_amount
	}
}

#更改昵称
mutation updateUserNameMutation($name: String!) {
	updateUserName(name: $name) {
		id
		account
		name
		real_name
	}
}

#修改头像
mutation updateUserAvatarMutation($avatar: String!) {
	updateUserAvatar(avatar: $avatar) {
		id
		avatar
	}
}

#设置性别
mutation setUserInfoMutation($data: UserInfo) {
	setUserInfo(data: $data) {
		id
		gender
	}
}

#纠错记录
query questionRedressesQuery($offset: Int, $limit: Int) {
	questionRedresses(offset: $offset, limit: $limit) {
		id
		question {
			id
			description
			answer
			image {
				id
				path
			}
			selections
			answers {
				Text
				Value
			}
		}
		content
		type
		gold_awarded
		remark
		status
		created_at
	}
}

# 答题记录
query answerHistoriesQuery($offset: Int, $limit: Int) {
	user {
		answerHistories(offset: $offset, limit: $limit) {
			correct_count
			question {
				id
				description
				answer
				image {
					id
					path
					width
					height
				}
				video {
					height
					width
					path
					rotate
					duration
				}
				selections
				answers {
					Text
					Value
				}
			}
		}
	}
}

#我的收藏
query FavoritesQuery($offset: Int, $limit: Int) {
	favorites(offset: $offset, limit: $limit) {
		id
		created_at
		question {
			id
			description
			image {
				id
				path
				width
				height
			}
			video {
				height
				width
				path
				rotate
				duration
			}
			selections
			category {
				id
				name
			}
		}
	}
}

#绑定支付宝验证
mutation SendVerificationCodeMutation($account: String!, $action: VerificationActionEnum!) {
	sendVerificationCode(account: $account, action: $action) {
		id
		user {
			name
		}
		code
		channel
		surplusSecond
	}
}

#关注
mutation FollowToggbleMutation($followed_type: FollowedEnumType!, $followed_id: Int!) {
	followToggle(followed_type: $followed_type, followed_id: $followed_id) {
		id
		follow_user {
			id
		}
		created_at
	}
}

#关注列表
query FollowsQuery($filter: FollowedEnumType, $offset: Int, $limit: Int) {
	follows(filter: $filter, offset: $offset, limit: $limit) {
		id
		follow_user {
			id
			name
			avatar
			gender
			level {
				id
				level
			}
		}
	}
}

#粉丝
query FollowersQuery($filter: FollowedEnumType, $offset: Int, $limit: Int) {
	followers(filter: $filter, offset: $offset, limit: $limit) {
		id
		follow_user {
			id
			name
			avatar
			gender
			level {
				id
				level
			}
		}
	}
}
