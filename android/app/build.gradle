apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
    entryFile: "index.js",
    devDisabledInDev: true,
    devDisabledInStaging: true,
    devDisabledInXiaomi: true,
    devDisabledInBaidu: true,
    devDisabledInWandoujia:true,
    devDisabledInVivo:true,
    devDisabledInOppo:true,
    devDisabledInHuawei:true,
    devDisabledInMeizu:true,
    devDisabledInQihoo:true,
    devDisabledInTencent:true,

    bundleInDev:true,
    bundleInStaging: true,
    bundleInXiaomi: true,
    bundleInBaidu: true,
    bundleInWandoujia:true,
    bundleInVivo:true,
    bundleInOppo:true,
    bundleInHuawei:true,
    bundleInMeizu:true,
    bundleInQihoo:true,
    bundleInTencent:true
]

//要为每个应用商店生成带有不同的.env内容的APK

project.ext.envConfigFiles = [
    debug: ".env",
    dev:".env.dev",
    release: ".env.prod",
    staging: ".env.staging",
    xiaomi: ".env.xiaomi",
    baidu: ".env.baidu",
    wandoujia:".env.wandoujia",
    vivo:".env.vivo",
    oppo:".env.oppo",
    huawei:".env.huawei",
    meizu:".env.meizu",
    qihoo:".env.qihoo",
    tencent:".env.tencent"
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId 
        minSdkVersion rootProject.ext.minSdkVersion
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 4
        versionName "1.4.0"
        manifestPlaceholders = [
                JPUSH_APPKEY: "",
                APP_CHANNEL : "default"
        ]

        manifestPlaceholders = [
                JPUSH_APPKEY: "3357861c9b5026f97afe2219", //在此替换你的APPKey
                APP_CHANNEL: "developer-default"    //应用渠道号
        ]
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        resValue "string", "build_config_package", "com.datizhuanqian"

    }
    signingConfigs {
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE) 
            storePassword MYAPP_RELEASE_STORE_PASSWORD 
            keyAlias MYAPP_RELEASE_KEY_ALIAS 
            keyPassword MYAPP_RELEASE_KEY_PASSWORD 
        } 
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
         debug {
            // Note: CodePush updates should not be tested in Debug mode as they are overriden by the RN packager. However, because CodePush checks for updates in all modes, we must supply a key.
            buildConfigField "String", "CODEPUSH_KEY", '""'
        }
        dev {
            initWith release
            applicationIdSuffix '.dev'
            matchingFallbacks = ['release']
            signingConfig signingConfigs.release 
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_key_staging + '"'
        }
        staging {
            initWith release
            applicationIdSuffix '.staging'
            matchingFallbacks = ['release']
            signingConfig signingConfigs.release 
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_key_staging + '"'
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release 
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_key_production + '"'
        }
        xiaomi {
            initWith release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            matchingFallbacks = ['release']
            signingConfig signingConfigs.release 
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_key_production + '"'
        }
        baidu {
            initWith release
            matchingFallbacks = ['release']
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release 
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_key_production + '"'
        }
        wandoujia {
            initWith release
            matchingFallbacks = ['release']
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release 
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_key_production + '"'
        }
        vivo {
            initWith release
            matchingFallbacks = ['release']
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release 
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_key_production + '"'
        }
        oppo {
            initWith release
            matchingFallbacks = ['release']
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release 
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_key_production + '"'
        }
        huawei {
            initWith release
            matchingFallbacks = ['release']
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release 
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_key_production + '"'
        }
        meizu {
            initWith release
            matchingFallbacks = ['release']
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release 
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_key_production + '"'
        } 
        qihoo {
            initWith release
            matchingFallbacks = ['release']
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release 
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_key_production + '"'
        }
        tencent {
            initWith release
            matchingFallbacks = ['release']
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release 
            buildConfigField "String", "CODEPUSH_KEY", '"' + rootProject.code_push_key_production + '"'
        }

    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':jcore-react-native')
    implementation project(':jpush-react-native')
    implementation project(':rnpackages')
    compile project(':jpush-react-native')
    compile project(':jcore-react-native')
    compile project(':react-native-video')
    compile project(':react-native-gesture-handler')
    compile project(':react-native-splash-screen')
    compile project(':react-native-webview')
    compile project(':react-native-config')
    compile project(':appcenter-crashes')
    compile project(':appcenter-analytics')
    compile project(':appcenter')
    compile project(':react-native-device-info')
    compile project(':react-native-svg')
    compile project(':react-native-code-push')
    compile project(':react-native-spinkit')
    compile project(':react-native-image-crop-picker')
    compile project(':react-native-vector-icons')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation 'com.android.support:multidex:1.0.3'
    implementation "com.facebook.react:react-native:+"  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
